{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport axios from 'axios';\nimport { onMounted } from 'vue';\n//import notifications from './mock/notifications.js'\n//primevue\nimport InputText from 'primevue/inputtext';\nimport Button from 'primevue/button';\nimport Card from 'primevue/card';\nimport Panel from 'primevue/panel';\nimport Textarea from 'primevue/textarea';\nimport Message from 'primevue/message';\nimport Accordion from 'primevue/accordion';\nimport AccordionTab from 'primevue/accordiontab';\nexport default {\n  __name: 'Message',\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const notifications = ref([]);\n    const notificationalready = ref([]);\n    const unreadCount = ref(0);\n\n    // onMounted(() => {\n    //     created();\n    // })\n\n    // function created() {\n    //     loadNotifications()\n    //     setInterval(this.loadNotifications, 5000) // 每5秒请求一次数据\n    // }\n\n    // function loadNotifications() {\n    //     axios.get('/api/notifications')\n    //         .then(response => {\n    //             const newNotifications = response.data.filter(notification => {\n    //                 return !this.notifications.some(n => n.id === notification.id)\n    //             })\n    //             this.notifications = this.notifications.concat(newNotifications)\n    //             this.unreadCount += newNotifications.length\n    //         })\n    //         .catch(error => {\n    //             console.log(error)\n    //         })\n    // }\n\n    function add() {\n      notifications.value.push({\n        id: notifications.length + 1,\n        title: '新消息' + (notifications.length + 1),\n        description: '这是一条新的通知消息。',\n        read: false\n      });\n      unreadCount.value += 1;\n    }\n    function deleteNotification(index) {\n      const notification = notificationalready[index];\n      //axios.delete(`/api/notifications/${notification.id}`)\n      //    .then(() => {\n      notificationalready.value.splice(index, 1);\n      //     if (!notification.read) {\n      //         unreadCount.value -= 1\n      //     }\n      // })\n      // .catch(error => {\n      //     console.log(error)\n      // })\n    }\n\n    const ss = ref('d');\n    function alreadyread(index) {\n      ss.value = 'dasss';\n      const notification = notifications[index];\n\n      //axios.delete(`/api/notifications/${notification.id}`)\n      //    .then(() => {\n      notifications.value.splice(index, 1);\n      unreadCount.value -= 1;\n      //    })\n      //    .catch(error => {\n      //        console.log(error)\n      //    })\n      notificationalready.value.push(notification);\n    }\n\n    // export default {\n    //     data() {\n    //         return {\n    //             notifications: notifications,\n    //             unreadCount: notifications.filter(notification => !notification.read).length\n    //         }\n    //     },\n    //     created() {\n    //         setInterval(() => {\n    //             this.loadNotifications()\n    //         }, 5000000)\n    //     },\n    //     methods: {\n    //         loadNotifications() {\n    //             // 用mock数据模拟后端返回\n    //             this.notifications.push({\n    //                 id: this.notifications.length + 1,\n    //                 title: '新消息' + (this.notifications.length + 1),\n    //                 description: '这是一条新的通知消息。',\n    //                 read: false\n    //             })\n    //             this.unreadCount += 1\n    //         },\n    //         deleteNotification(index) {\n    //             const notification = this.notifications[index]\n    //             this.notifications.splice(index, 1)\n    //             if (!notification.read) {\n    //                 this.unreadCount -= 1\n    //             }\n    //         },\n    //     }\n    // }\n\n    const __returned__ = {\n      notifications,\n      notificationalready,\n      unreadCount,\n      add,\n      deleteNotification,\n      ss,\n      alreadyread,\n      ref,\n      get axios() {\n        return axios;\n      },\n      onMounted,\n      get InputText() {\n        return InputText;\n      },\n      get Button() {\n        return Button;\n      },\n      get Card() {\n        return Card;\n      },\n      get Panel() {\n        return Panel;\n      },\n      get Textarea() {\n        return Textarea;\n      },\n      get Message() {\n        return Message;\n      },\n      get Accordion() {\n        return Accordion;\n      },\n      get AccordionTab() {\n        return AccordionTab;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","axios","onMounted","InputText","Button","Card","Panel","Textarea","Message","Accordion","AccordionTab","notifications","notificationalready","unreadCount","add","value","push","id","length","title","description","read","deleteNotification","index","notification","splice","ss","alreadyread"],"sources":["D:/Desktop/HMS/HMS-front-end/hms_frontend/src/views/Message.vue"],"sourcesContent":["<template>\r\n    <!-- <canvas id=\"myCanvas2\"></canvas> -->\r\n    <div class=\"all\">\r\n        <button @click=\"add\">增加消息</button>\r\n        <div class=\"header\">\r\n            <h1>消息通知{{ ss }}</h1>\r\n            <div class=\"badge\" v-if=\"unreadCount > 0\">{{ unreadCount }}</div>\r\n        </div>\r\n        <h2>&nbsp&nbsp未读消息</h2>\r\n        <div class=\"notifications\">\r\n            <div class=\"notification\" v-for=\"(notification, index) in notifications\" :key=\"index\">\r\n                <div class=\"title\">{{ notification.title }}</div>\r\n                <div class=\"description\">{{ notification.description }}</div>\r\n                <!-- <button @click=\"deleteNotification(index)\">删除</button>\r\n                &nbsp;&nbsp; -->\r\n                <button @click=\"alreadyread(index)\">标为已读</button>\r\n            </div>\r\n        </div>\r\n        <h2>&nbsp&nbsp已读消息</h2>\r\n        <div class=\"notifications\">\r\n            <div class=\"notification\" v-for=\"(notification1, index) in notificationalready\" :key=\"index\">\r\n                <div class=\"title\">{{ notification1.title }}</div>\r\n                <div class=\"description\">{{ notification1.description }}</div>\r\n                <button @click=\"deleteNotification(index)\">删除</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n  \r\n<script setup>\r\nimport { ref } from 'vue';\r\nimport axios from 'axios';\r\nimport { onMounted } from 'vue';\r\n//import notifications from './mock/notifications.js'\r\n//primevue\r\nimport InputText from 'primevue/inputtext';\r\nimport Button from 'primevue/button';\r\nimport Card from 'primevue/card';\r\nimport Panel from 'primevue/panel';\r\nimport Textarea from 'primevue/textarea';\r\nimport Message from 'primevue/message';\r\nimport Accordion from 'primevue/accordion';\r\nimport AccordionTab from 'primevue/accordiontab';\r\n\r\nconst notifications = ref([]);\r\nconst notificationalready = ref([]);\r\nconst unreadCount = ref(0);\r\n\r\n// onMounted(() => {\r\n//     created();\r\n// })\r\n\r\n// function created() {\r\n//     loadNotifications()\r\n//     setInterval(this.loadNotifications, 5000) // 每5秒请求一次数据\r\n// }\r\n\r\n// function loadNotifications() {\r\n//     axios.get('/api/notifications')\r\n//         .then(response => {\r\n//             const newNotifications = response.data.filter(notification => {\r\n//                 return !this.notifications.some(n => n.id === notification.id)\r\n//             })\r\n//             this.notifications = this.notifications.concat(newNotifications)\r\n//             this.unreadCount += newNotifications.length\r\n//         })\r\n//         .catch(error => {\r\n//             console.log(error)\r\n//         })\r\n// }\r\n\r\nfunction add() {\r\n    notifications.value.push({\r\n        id: notifications.length + 1,\r\n        title: '新消息' + (notifications.length + 1),\r\n        description: '这是一条新的通知消息。',\r\n        read: false\r\n    })\r\n    unreadCount.value += 1\r\n}\r\nfunction deleteNotification(index) {\r\n    const notification = notificationalready[index]\r\n    //axios.delete(`/api/notifications/${notification.id}`)\r\n    //    .then(() => {\r\n    notificationalready.value.splice(index, 1)\r\n    //     if (!notification.read) {\r\n    //         unreadCount.value -= 1\r\n    //     }\r\n    // })\r\n    // .catch(error => {\r\n    //     console.log(error)\r\n    // })\r\n}\r\nconst ss = ref('d');\r\nfunction alreadyread(index) {\r\n    ss.value = 'dasss'\r\n    const notification = notifications[index]\r\n\r\n    //axios.delete(`/api/notifications/${notification.id}`)\r\n    //    .then(() => {\r\n    notifications.value.splice(index, 1)\r\n    unreadCount.value -= 1\r\n    //    })\r\n    //    .catch(error => {\r\n    //        console.log(error)\r\n    //    })\r\n    notificationalready.value.push(notification);\r\n}\r\n\r\n\r\n\r\n// export default {\r\n//     data() {\r\n//         return {\r\n//             notifications: notifications,\r\n//             unreadCount: notifications.filter(notification => !notification.read).length\r\n//         }\r\n//     },\r\n//     created() {\r\n//         setInterval(() => {\r\n//             this.loadNotifications()\r\n//         }, 5000000)\r\n//     },\r\n//     methods: {\r\n//         loadNotifications() {\r\n//             // 用mock数据模拟后端返回\r\n//             this.notifications.push({\r\n//                 id: this.notifications.length + 1,\r\n//                 title: '新消息' + (this.notifications.length + 1),\r\n//                 description: '这是一条新的通知消息。',\r\n//                 read: false\r\n//             })\r\n//             this.unreadCount += 1\r\n//         },\r\n//         deleteNotification(index) {\r\n//             const notification = this.notifications[index]\r\n//             this.notifications.splice(index, 1)\r\n//             if (!notification.read) {\r\n//                 this.unreadCount -= 1\r\n//             }\r\n//         },\r\n//     }\r\n// }\r\n</script>\r\n  \r\n<style>\r\n.all {\r\n    position: absolute;\r\n    left: 400px;\r\n    top: 50px;\r\n    width: 650px;\r\n    border: 1px solid rgb(204, 204, 204);\r\n    border-radius: 1%;\r\n}\r\n\r\n.header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n    position: relative;\r\n    left: 20px;\r\n}\r\n\r\n.notifications {\r\n    margin-top: 20px;\r\n    position: relative;\r\n    left: 20px;\r\n}\r\n\r\n.notification {\r\n    border: 1px solid #ccc;\r\n    padding: 10px;\r\n    width: 600px;\r\n\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.title {\r\n    font-weight: bold;\r\n}\r\n\r\n.description {\r\n    margin-top: 10px;\r\n}\r\n\r\nbutton {\r\n    background-color: #007bff;\r\n    color: #fff;\r\n    border: none;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    margin-top: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n.badge {\r\n    background-color: red;\r\n    color: #fff;\r\n    font-size: 12px;\r\n    padding: 2px 5px;\r\n    border-radius: 50%;\r\n    margin-left: 5px;\r\n\r\n    position: relative;\r\n    right: 50px;\r\n}\r\n</style>"],"mappings":";AA8BA,SAASA,GAAG,QAAQ,KAAK;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,KAAK;AAC/B;AACA;AACA,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,IAAI,MAAM,eAAe;AAChC,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,YAAY,MAAM,uBAAuB;;;;;;;IAEhD,MAAMC,aAAa,GAAGX,GAAG,CAAC,EAAE,CAAC;IAC7B,MAAMY,mBAAmB,GAAGZ,GAAG,CAAC,EAAE,CAAC;IACnC,MAAMa,WAAW,GAAGb,GAAG,CAAC,CAAC,CAAC;;IAE1B;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,SAASc,GAAGA,CAAA,EAAG;MACXH,aAAa,CAACI,KAAK,CAACC,IAAI,CAAC;QACrBC,EAAE,EAAEN,aAAa,CAACO,MAAM,GAAG,CAAC;QAC5BC,KAAK,EAAE,KAAK,IAAIR,aAAa,CAACO,MAAM,GAAG,CAAC,CAAC;QACzCE,WAAW,EAAE,aAAa;QAC1BC,IAAI,EAAE;MACV,CAAC,CAAC;MACFR,WAAW,CAACE,KAAK,IAAI,CAAC;IAC1B;IACA,SAASO,kBAAkBA,CAACC,KAAK,EAAE;MAC/B,MAAMC,YAAY,GAAGZ,mBAAmB,CAACW,KAAK,CAAC;MAC/C;MACA;MACAX,mBAAmB,CAACG,KAAK,CAACU,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MAC1C;MACA;MACA;MACA;MACA;MACA;MACA;IACJ;;IACA,MAAMG,EAAE,GAAG1B,GAAG,CAAC,GAAG,CAAC;IACnB,SAAS2B,WAAWA,CAACJ,KAAK,EAAE;MACxBG,EAAE,CAACX,KAAK,GAAG,OAAO;MAClB,MAAMS,YAAY,GAAGb,aAAa,CAACY,KAAK,CAAC;;MAEzC;MACA;MACAZ,aAAa,CAACI,KAAK,CAACU,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACpCV,WAAW,CAACE,KAAK,IAAI,CAAC;MACtB;MACA;MACA;MACA;MACAH,mBAAmB,CAACG,KAAK,CAACC,IAAI,CAACQ,YAAY,CAAC;IAChD;;IAIA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}