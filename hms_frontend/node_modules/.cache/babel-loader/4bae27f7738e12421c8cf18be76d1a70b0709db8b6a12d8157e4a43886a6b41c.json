{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"all\"\n};\nconst _hoisted_2 = {\n  class: \"header\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"badge\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"  未读消息\", -1 /* HOISTED */);\nconst _hoisted_5 = {\n  class: \"notifications\"\n};\nconst _hoisted_6 = {\n  class: \"title\"\n};\nconst _hoisted_7 = {\n  class: \"description\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"  已读消息\", -1 /* HOISTED */);\nconst _hoisted_10 = {\n  class: \"notifications\"\n};\nconst _hoisted_11 = {\n  class: \"title\"\n};\nconst _hoisted_12 = {\n  class: \"description\"\n};\nconst _hoisted_13 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" <canvas id=\\\"myCanvas2\\\"></canvas> \"), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: $setup.add\n  }, \"增加消息\"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"h1\", null, \"消息通知\" + _toDisplayString($setup.ss), 1 /* TEXT */), $setup.unreadCount > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, _toDisplayString($setup.unreadCount), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), _hoisted_4, _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.notifications, (notification, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"notification\",\n      key: index\n    }, [_createElementVNode(\"div\", _hoisted_6, _toDisplayString(notification.title), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_7, _toDisplayString(notification.description), 1 /* TEXT */), _createCommentVNode(\" <button @click=\\\"deleteNotification(index)\\\">删除</button>\\r\\n                &nbsp;&nbsp; \"), _createElementVNode(\"button\", {\n      onClick: $event => $setup.alreadyread(index)\n    }, \"标为已读\", 8 /* PROPS */, _hoisted_8)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _hoisted_9, _createElementVNode(\"div\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.notificationalready, (notification1, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"notification\",\n      key: index\n    }, [_createElementVNode(\"div\", _hoisted_11, _toDisplayString(notification1.title), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_12, _toDisplayString(notification1.description), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $setup.deleteNotification(index)\n    }, \"删除\", 8 /* PROPS */, _hoisted_13)]);\n  }), 128 /* KEYED_FRAGMENT */))])])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","_createCommentVNode","_hoisted_1","onClick","$setup","add","_hoisted_2","_toDisplayString","ss","unreadCount","_createElementBlock","_hoisted_3","_hoisted_4","_hoisted_5","_Fragment","_renderList","notifications","notification","index","key","_hoisted_6","title","_hoisted_7","description","$event","alreadyread","_hoisted_8","_hoisted_9","_hoisted_10","notificationalready","notification1","_hoisted_11","_hoisted_12","deleteNotification","_hoisted_13"],"sources":["D:\\Desktop\\HMS-front-end\\hms_frontend\\src\\views\\Message.vue"],"sourcesContent":["<template>\r\n    <!-- <canvas id=\"myCanvas2\"></canvas> -->\r\n    <div class=\"all\">\r\n        <button @click=\"add\">增加消息</button>\r\n        <div class=\"header\">\r\n            <h1>消息通知{{ ss }}</h1>\r\n            <div class=\"badge\" v-if=\"unreadCount > 0\">{{ unreadCount }}</div>\r\n        </div>\r\n        <h2>&nbsp&nbsp未读消息</h2>\r\n        <div class=\"notifications\">\r\n            <div class=\"notification\" v-for=\"(notification, index) in notifications\" :key=\"index\">\r\n                <div class=\"title\">{{ notification.title }}</div>\r\n                <div class=\"description\">{{ notification.description }}</div>\r\n                <!-- <button @click=\"deleteNotification(index)\">删除</button>\r\n                &nbsp;&nbsp; -->\r\n                <button @click=\"alreadyread(index)\">标为已读</button>\r\n            </div>\r\n        </div>\r\n        <h2>&nbsp&nbsp已读消息</h2>\r\n        <div class=\"notifications\">\r\n            <div class=\"notification\" v-for=\"(notification1, index) in notificationalready\" :key=\"index\">\r\n                <div class=\"title\">{{ notification1.title }}</div>\r\n                <div class=\"description\">{{ notification1.description }}</div>\r\n                <button @click=\"deleteNotification(index)\">删除</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n  \r\n<script setup>\r\nimport { ref } from 'vue';\r\nimport axios from 'axios';\r\nimport { onMounted } from 'vue';\r\n//import notifications from './mock/notifications.js'\r\n//primevue\r\nimport InputText from 'primevue/inputtext';\r\nimport Button from 'primevue/button';\r\nimport Card from 'primevue/card';\r\nimport Panel from 'primevue/panel';\r\nimport Textarea from 'primevue/textarea';\r\nimport Message from 'primevue/message';\r\nimport Accordion from 'primevue/accordion';\r\nimport AccordionTab from 'primevue/accordiontab';\r\n\r\nconst notifications = ref([]);\r\nconst notificationalready = ref([]);\r\nconst unreadCount = ref(0);\r\n\r\n// onMounted(() => {\r\n//     created();\r\n// })\r\n\r\n// function created() {\r\n//     loadNotifications()\r\n//     setInterval(this.loadNotifications, 5000) // 每5秒请求一次数据\r\n// }\r\n\r\n// function loadNotifications() {\r\n//     axios.get('/api/notifications')\r\n//         .then(response => {\r\n//             const newNotifications = response.data.filter(notification => {\r\n//                 return !this.notifications.some(n => n.id === notification.id)\r\n//             })\r\n//             this.notifications = this.notifications.concat(newNotifications)\r\n//             this.unreadCount += newNotifications.length\r\n//         })\r\n//         .catch(error => {\r\n//             console.log(error)\r\n//         })\r\n// }\r\n\r\nfunction add() {\r\n    notifications.value.push({\r\n        id: notifications.length + 1,\r\n        title: '新消息' + (notifications.length + 1),\r\n        description: '这是一条新的通知消息。',\r\n        read: false\r\n    })\r\n    unreadCount.value += 1\r\n}\r\nfunction deleteNotification(index) {\r\n    const notification = notificationalready[index]\r\n    //axios.delete(`/api/notifications/${notification.id}`)\r\n    //    .then(() => {\r\n    notificationalready.value.splice(index, 1)\r\n    //     if (!notification.read) {\r\n    //         unreadCount.value -= 1\r\n    //     }\r\n    // })\r\n    // .catch(error => {\r\n    //     console.log(error)\r\n    // })\r\n}\r\nconst ss = ref('d');\r\nfunction alreadyread(index) {\r\n    ss.value = 'dasss'\r\n    const notification = notifications[index]\r\n\r\n    //axios.delete(`/api/notifications/${notification.id}`)\r\n    //    .then(() => {\r\n    notifications.value.splice(index, 1)\r\n    unreadCount.value -= 1\r\n    //    })\r\n    //    .catch(error => {\r\n    //        console.log(error)\r\n    //    })\r\n    notificationalready.value.push(notification);\r\n}\r\n\r\n\r\n\r\n// export default {\r\n//     data() {\r\n//         return {\r\n//             notifications: notifications,\r\n//             unreadCount: notifications.filter(notification => !notification.read).length\r\n//         }\r\n//     },\r\n//     created() {\r\n//         setInterval(() => {\r\n//             this.loadNotifications()\r\n//         }, 5000000)\r\n//     },\r\n//     methods: {\r\n//         loadNotifications() {\r\n//             // 用mock数据模拟后端返回\r\n//             this.notifications.push({\r\n//                 id: this.notifications.length + 1,\r\n//                 title: '新消息' + (this.notifications.length + 1),\r\n//                 description: '这是一条新的通知消息。',\r\n//                 read: false\r\n//             })\r\n//             this.unreadCount += 1\r\n//         },\r\n//         deleteNotification(index) {\r\n//             const notification = this.notifications[index]\r\n//             this.notifications.splice(index, 1)\r\n//             if (!notification.read) {\r\n//                 this.unreadCount -= 1\r\n//             }\r\n//         },\r\n//     }\r\n// }\r\n</script>\r\n  \r\n<style>\r\n.all {\r\n    position: absolute;\r\n    left: 400px;\r\n    top: 50px;\r\n    width: 650px;\r\n    border: 1px solid rgb(204, 204, 204);\r\n    border-radius: 1%;\r\n}\r\n\r\n.header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n    position: relative;\r\n    left: 20px;\r\n}\r\n\r\n.notifications {\r\n    margin-top: 20px;\r\n    position: relative;\r\n    left: 20px;\r\n}\r\n\r\n.notification {\r\n    border: 1px solid #ccc;\r\n    padding: 10px;\r\n    width: 600px;\r\n\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.title {\r\n    font-weight: bold;\r\n}\r\n\r\n.description {\r\n    margin-top: 10px;\r\n}\r\n\r\nbutton {\r\n    background-color: #007bff;\r\n    color: #fff;\r\n    border: none;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    margin-top: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n.badge {\r\n    background-color: red;\r\n    color: #fff;\r\n    font-size: 12px;\r\n    padding: 2px 5px;\r\n    border-radius: 50%;\r\n    margin-left: 5px;\r\n\r\n    position: relative;\r\n    right: 50px;\r\n}\r\n</style>"],"mappings":";;EAESA,KAAK,EAAC;AAAK;;EAEPA,KAAK,EAAC;AAAQ;;;EAEVA,KAAK,EAAC;;gCAEfC,mBAAA,CAAuB,YAAnB,QAAc;;EACbD,KAAK,EAAC;AAAe;;EAEbA,KAAK,EAAC;AAAO;;EACbA,KAAK,EAAC;AAAa;;gCAMhCC,mBAAA,CAAuB,YAAnB,QAAc;;EACbD,KAAK,EAAC;AAAe;;EAEbA,KAAK,EAAC;AAAO;;EACbA,KAAK,EAAC;AAAa;;;6DArBpCE,mBAAA,wCAAyC,EACzCD,mBAAA,CAwBM,OAxBNE,UAwBM,GAvBFF,mBAAA,CAAkC;IAAzBG,OAAK,EAAEC,MAAA,CAAAC;EAAG,GAAE,MAAI,GACzBL,mBAAA,CAGM,OAHNM,UAGM,GAFFN,mBAAA,CAAqB,YAAjB,MAAI,GAAAO,gBAAA,CAAGH,MAAA,CAAAI,EAAE,kBACYJ,MAAA,CAAAK,WAAW,Q,cAApCC,mBAAA,CAAiE,OAAjEC,UAAiE,EAAAJ,gBAAA,CAApBH,MAAA,CAAAK,WAAW,oB,qCAE5DG,UAAuB,EACvBZ,mBAAA,CAQM,OARNa,UAQM,I,kBAPFH,mBAAA,CAMMI,SAAA,QAAAC,WAAA,CANoDX,MAAA,CAAAY,aAAa,GAArCC,YAAY,EAAEC,KAAK;yBAArDR,mBAAA,CAMM;MANDX,KAAK,EAAC,cAAc;MAAiDoB,GAAG,EAAED;QAC3ElB,mBAAA,CAAiD,OAAjDoB,UAAiD,EAAAb,gBAAA,CAA3BU,YAAY,CAACI,KAAK,kBACxCrB,mBAAA,CAA6D,OAA7DsB,UAA6D,EAAAf,gBAAA,CAAjCU,YAAY,CAACM,WAAW,kBACpDtB,mBAAA,8FACgB,EAChBD,mBAAA,CAAiD;MAAxCG,OAAK,EAAAqB,MAAA,IAAEpB,MAAA,CAAAqB,WAAW,CAACP,KAAK;OAAG,MAAI,iBAAAQ,UAAA,E;oCAGhDC,UAAuB,EACvB3B,mBAAA,CAMM,OANN4B,WAMM,I,kBALFlB,mBAAA,CAIMI,SAAA,QAAAC,WAAA,CAJqDX,MAAA,CAAAyB,mBAAmB,GAA5CC,aAAa,EAAEZ,KAAK;yBAAtDR,mBAAA,CAIM;MAJDX,KAAK,EAAC,cAAc;MAAwDoB,GAAG,EAAED;QAClFlB,mBAAA,CAAkD,OAAlD+B,WAAkD,EAAAxB,gBAAA,CAA5BuB,aAAa,CAACT,KAAK,kBACzCrB,mBAAA,CAA8D,OAA9DgC,WAA8D,EAAAzB,gBAAA,CAAlCuB,aAAa,CAACP,WAAW,kBACrDvB,mBAAA,CAAsD;MAA7CG,OAAK,EAAAqB,MAAA,IAAEpB,MAAA,CAAA6B,kBAAkB,CAACf,KAAK;OAAG,IAAE,iBAAAgB,WAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}